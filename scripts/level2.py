import subprocess
import pandas as pd
import os
import datetime

code = ['try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Print\\Providers\\LanMan Print Services\\Servers" `\n                -Name "AddPrinterDrivers" `\n                | Select-Object -ExpandProperty "AddPrinterDrivers"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Cryptography" `\n                -Name "ForceKeyProtection" `\n                | Select-Object -ExpandProperty "ForceKeyProtection"\n        \n            if (($regValue -ne 1) -and ($regValue -ne 2)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1 or 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\BTAGService" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\bthserv" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\MapsBroker" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\lfsvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\lltdsvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\MSiSCSI" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PNRPsvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\p2psvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\p2pimsvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PNRPAutoReg" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Spooler" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\wercplsupport" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\RasAuto" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SessionEnv" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\TermService" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\UmRdpService" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\RemoteRegistry" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SNMP" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WerSvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Wecsvc" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WpnService" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PushToInstall" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WinRM" `\n                -Name "Start" `\n                | Select-Object -ExpandProperty "Start"\n        \n            if ($regValue -ne 4) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 4"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" `\n                -Name "AllowOnlineTips" `\n                | Select-Object -ExpandProperty "AllowOnlineTips"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\RasMan\\Parameters" `\n                -Name "disablesavepassword" `\n                | Select-Object -ExpandProperty "disablesavepassword"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters" `\n                -Name "KeepAliveTime" `\n                | Select-Object -ExpandProperty "KeepAliveTime"\n        \n            if ($regValue -ne 300000) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 300000"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters" `\n                -Name "PerformRouterDiscovery" `\n                | Select-Object -ExpandProperty "PerformRouterDiscovery"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\TCPIP6\\Parameters" `\n                -Name "tcpmaxdataretransmissions" `\n                | Select-Object -ExpandProperty "tcpmaxdataretransmissions"\n        \n            if ($regValue -ne 3) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Tcpip\\Parameters" `\n                -Name "tcpmaxdataretransmissions" `\n                | Select-Object -ExpandProperty "tcpmaxdataretransmissions"\n        \n            if ($regValue -ne 3) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 3"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\System" `\n                -Name "EnableFontProviders" `\n                | Select-Object -ExpandProperty "EnableFontProviders"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Peernet" `\n                -Name "Disabled" `\n                | Select-Object -ExpandProperty "Disabled"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\TCPIP6\\Parameters" `\n                -Name "DisabledComponents" `\n                | Select-Object -ExpandProperty "DisabledComponents"\n        \n            if (($regValue -ne 255)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x == 255"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WCN\\UI" `\n                -Name "DisableWcnUi" `\n                | Select-Object -ExpandProperty "DisableWcnUi"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\PushNotifications" `\n                -Name "NoCloudApplicationNotification" `\n                | Select-Object -ExpandProperty "NoCloudApplicationNotification"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer" `\n                -Name "NoUseStoreOpenWith" `\n                | Select-Object -ExpandProperty "NoUseStoreOpenWith"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\TabletPC" `\n                -Name "PreventHandwritingDataSharing" `\n                | Select-Object -ExpandProperty "PreventHandwritingDataSharing"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\HandwritingErrorReports" `\n                -Name "PreventHandwritingErrorReports" `\n                | Select-Object -ExpandProperty "PreventHandwritingErrorReports"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Internet Connection Wizard" `\n                -Name "ExitOnMSICW" `\n                | Select-Object -ExpandProperty "ExitOnMSICW"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows NT\\Printers" `\n                -Name "DisableHTTPPrinting" `\n                | Select-Object -ExpandProperty "DisableHTTPPrinting"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Registration Wizard Control" `\n                -Name "NoRegistration" `\n                | Select-Object -ExpandProperty "NoRegistration"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\SearchCompanion" `\n                -Name "DisableContentFileUpdates" `\n                | Select-Object -ExpandProperty "DisableContentFileUpdates"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" `\n                -Name "NoOnlinePrintsWizard" `\n                | Select-Object -ExpandProperty "NoOnlinePrintsWizard"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer" `\n                -Name "NoPublishingWizard" `\n                | Select-Object -ExpandProperty "NoPublishingWizard"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Messenger\\Client" `\n                -Name "CEIP" `\n                | Select-Object -ExpandProperty "CEIP"\n        \n            if ($regValue -ne 2) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 2"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\SQMClient\\Windows" `\n                -Name "CEIPEnable" `\n                | Select-Object -ExpandProperty "CEIPEnable"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Control Panel\\International" `\n                -Name "BlockUserInputMethodsForSignIn" `\n                | Select-Object -ExpandProperty "BlockUserInputMethodsForSignIn"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\System" `\n                -Name "AllowCrossDeviceClipboard" `\n                | Select-Object -ExpandProperty "AllowCrossDeviceClipboard"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\System" `\n                -Name "UploadUserActivities" `\n                | Select-Object -ExpandProperty "UploadUserActivities"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\ScriptedDiagnosticsProvider\\Policy" `\n                -Name "DisableQueryRemoteServer" `\n                | Select-Object -ExpandProperty "DisableQueryRemoteServer"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WDI\\{9c5a40da-b965-4fc3-8781-88dd50a6299d}" `\n                -Name "ScenarioExecutionEnabled" `\n                | Select-Object -ExpandProperty "ScenarioExecutionEnabled"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\AdvertisingInfo" `\n                -Name "DisabledByGroupPolicy" `\n                | Select-Object -ExpandProperty "DisabledByGroupPolicy"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CurrentVersion\\AppModel\\StateManager" `\n                -Name "AllowSharedLocalAppData" `\n                | Select-Object -ExpandProperty "AllowSharedLocalAppData"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System" `\n                -Name "BlockHostedAppAccessWinRT" `\n                | Select-Object -ExpandProperty "BlockHostedAppAccessWinRT"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Camera" `\n                -Name "AllowCamera" `\n                | Select-Object -ExpandProperty "AllowCamera"\n        \n            if ($regValue -eq 0) {\n                return @{\n                    Message = "Compliant"\n                    Status = "Pass"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n\n        try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam" `\n                -Name "Value" `\n                | Select-Object -ExpandProperty "Value"\n        \n            if ($regValue -match "Deny") {\n                return @{\n                    Message = "Compliant"\n                    Status = "Pass"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Camera is not deactivated."\n            Status = "Fail"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\CloudContent" `\n                -Name "DisableCloudOptimizedContent" `\n                | Select-Object -ExpandProperty "DisableCloudOptimizedContent"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection" `\n                -Name "DisableEnterpriseAuthProxy" `\n                | Select-Object -ExpandProperty "DisableEnterpriseAuthProxy"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer" `\n                -Name "DisableGraphRecentItems" `\n                | Select-Object -ExpandProperty "DisableGraphRecentItems"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\LocationAndSensors" `\n                -Name "DisableLocation" `\n                | Select-Object -ExpandProperty "DisableLocation"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Messaging" `\n                -Name "AllowMessageSync" `\n                | Select-Object -ExpandProperty "AllowMessageSync"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows Defender\\Spynet" `\n                -Name "SpynetReporting" `\n                | Select-Object -ExpandProperty "SpynetReporting"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine" `\n                -Name "EnableFileHashComputation" `\n                | Select-Object -ExpandProperty "EnableFileHashComputation"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            if($avstatus){\n\n                if ((-not $windefrunning)) {\n                    return @{\n                        Message = "This rule requires Windows Defender Antivirus to be enabled."\n                        Status = "None"\n                    }\n                }\n            }\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting" `\n                -Name "DisableGenericReports" `\n                | Select-Object -ExpandProperty "DisableGenericReports"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Feeds" `\n                -Name "EnableFeeds" `\n                | Select-Object -ExpandProperty "EnableFeeds"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\PushToInstall" `\n                -Name "DisablePushToInstall" `\n                | Select-Object -ExpandProperty "DisablePushToInstall"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services\\Client" `\n                -Name "DisableCloudClipboardIntegration" `\n                | Select-Object -ExpandProperty "DisableCloudClipboardIntegration"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fDenyTSConnections" `\n                | Select-Object -ExpandProperty "fDenyTSConnections"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "EnableUiaRedirection" `\n                | Select-Object -ExpandProperty "EnableUiaRedirection"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fDisableCcm" `\n                | Select-Object -ExpandProperty "fDisableCcm"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fDisableLocationRedir" `\n                | Select-Object -ExpandProperty "fDisableLocationRedir"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fDisableLPT" `\n                | Select-Object -ExpandProperty "fDisableLPT"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fDisablePNPRedir" `\n                | Select-Object -ExpandProperty "fDisablePNPRedir"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "fDisableWebAuthn" `\n                | Select-Object -ExpandProperty "fDisableWebAuthn"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "MaxIdleTime" `\n                | Select-Object -ExpandProperty "MaxIdleTime"\n        \n            if (($regValue -gt 900000 -or $regValue -eq 0)) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: x <= 900000 and x != 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services" `\n                -Name "MaxDisconnectionTime" `\n                | Select-Object -ExpandProperty "MaxDisconnectionTime"\n        \n            if ($regValue -ne 60000) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 60000"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search" `\n                -Name "AllowCloudSearch" `\n                | Select-Object -ExpandProperty "AllowCloudSearch"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Compliant. Registry value not found."\n                Status = "Pass"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Compliant. Registry key not found."\n                Status = "Pass"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search" `\n                -Name "EnableDynamicContentInWSB" `\n                | Select-Object -ExpandProperty "EnableDynamicContentInWSB"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Software Protection Platform" `\n                -Name "NoGenTicket" `\n                | Select-Object -ExpandProperty "NoGenTicket"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\WindowsStore" `\n                -Name "DisableStoreApps" `\n                | Select-Object -ExpandProperty "DisableStoreApps"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\WindowsStore" `\n                -Name "RemoveWindowsStore" `\n                | Select-Object -ExpandProperty "RemoveWindowsStore"\n        \n            if ($regValue -ne 1) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 1"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\WindowsInkWorkspace" `\n                -Name "AllowSuggestedAppsInWindowsInkWorkspace" `\n                | Select-Object -ExpandProperty "AllowSuggestedAppsInWindowsInkWorkspace"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\Installer" `\n                -Name "SafeForScripting" `\n                | Select-Object -ExpandProperty "SafeForScripting"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\WinRM\\Service" `\n                -Name "AllowAutoConfig" `\n                | Select-Object -ExpandProperty "AllowAutoConfig"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 'try {\n            $regValue = Get-ItemProperty -ErrorAction Stop `\n                -Path "Registry::HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\WinRM\\Service\\WinRS" `\n                -Name "AllowRemoteShellAccess" `\n                | Select-Object -ExpandProperty "AllowRemoteShellAccess"\n        \n            if ($regValue -ne 0) {\n                return @{\n                    Message = "Registry value is \'$regValue\'. Expected: 0"\n                    Status = "Fail"\n                }\n            }\n        }\n        catch [System.Management.Automation.PSArgumentException] {\n            return @{\n                Message = "Registry value not found."\n                Status = "Fail"\n            }\n        }\n        catch [System.Management.Automation.ItemNotFoundException] {\n            return @{\n                Message = "Registry key not found."\n                Status = "Fail"\n            }\n        }\n        \n        return @{\n            Message = "Compliant"\n            Status = "Pass"\n        }\n ',
 '$securityPolicy = Get-AuditResource "WindowsSecurityPolicy"\n        $currentUserRights = $securityPolicy["Privilege Rights"]["SeBatchLogonRight"]\n        $identityAccounts = @(\n            "S-1-5-32-544"\n        ) | ConvertTo-NTAccountUser | Where-Object { $null -ne $_ }\n        \n        $unexpectedUsers = $currentUserRights.Account | Where-Object { $_ -notin $identityAccounts.Account }\n            \n        if ($unexpectedUsers.Count -gt 0) {\n            $messages = @()\n            $messages += "The user right \'SeBatchLogonRight\' contains following unexpected users: " + ($unexpectedUsers -join ", ")\n            $message = $messages -join [System.Environment]::NewLine\n        \n            return @{\n                Status = "False"\n                Message = $message\n            }\n        }\n        \n        return @{\n            Status = "True"\n            Message = "Compliant"\n        }\n ']

cis_index = ['2.3.4.1',
 '2.3.14.1',
 '5.1',
 '5.2',
 '5.4',
 '5.5',
 '5.9',
 '5.12',
 '5.14',
 '5.15',
 '5.16',
 '5.17',
 '5.18',
 '5.19',
 '5.20',
 '5.21',
 '5.22',
 '5.23',
 '5.25',
 '5.27',
 '5.29',
 '5.34',
 '5.35',
 '5.38',
 '5.39',
 '5.40',
 '18.1.3',
 '18.5.4',
 '18.5.6',
 '18.5.8',
 '18.5.11',
 '18.5.12',
 '18.6.5.1',
 '18.6.10.2',
 '18.6.19.2.1',
 '18.6.20.2',
 '18.8.1.1',
 '18.9.20.1.1',
 '18.9.20.1.3',
 '18.9.20.1.4',
 '18.9.20.1.5',
 '18.9.20.1.7',
 '18.9.20.1.8',
 '18.9.20.1.9',
 '18.9.20.1.10',
 '18.9.20.1.11',
 '18.9.20.1.12',
 '18.9.20.1.13',
 '18.9.26.1',
 '18.9.30.1',
 '18.9.30.2',
 '18.9.46.5.1',
 '18.9.46.11.1',
 '18.9.48.1',
 '18.10.3.1',
 '18.10.5.2',
 '18.10.10.1',
 '18.10.12.2',
 '18.10.15.2',
 '18.10.29.3',
 '18.10.37.1',
 '18.10.41.1',
 '18.10.43.5.2',
 '18.10.43.7.1',
 '18.10.43.12.1',
 '18.10.50.1',
 '18.10.56.1',
 '18.10.57.2.2',
 '18.10.57.3.2.1',
 '18.10.57.3.3.1',
 '18.10.57.3.3.2',
 '18.10.57.3.3.4',
 '18.10.57.3.3.5',
 '18.10.57.3.3.6',
 '18.10.57.3.3.7',
 '18.10.57.3.10.1',
 '18.10.57.3.10.2',
 '18.10.59.2',
 '18.10.59.7',
 '18.10.63.1',
 '18.10.66.1',
 '18.10.66.5',
 '18.10.80.1',
 '18.10.81.3',
 '18.10.89.2.2',
 '18.10.90.1',
 '2.2.28']

title = ["Ensure 'Devices: Prevent users from installing printer drivers' is set to 'Enabled'",
 "Ensure 'System cryptography: Force strong key protection for user keys stored on the computer' is set to 1 - 'User is prompted when the key is first used' or 2 - higher",
 "Ensure 'Bluetooth Audio Gateway Service (BTAGService)' is set to 'Disabled'",
 "Ensure 'Bluetooth Support Service (bthserv)' is set to 'Disabled'",
 "Ensure 'Downloaded Maps Manager (MapsBroker)' is set to 'Disabled'",
 "Ensure 'Geolocation Service (lfsvc)' is set to 'Disabled'",
 "Ensure 'Link-Layer Topology Discovery Mapper (lltdsvc)' is set to 'Disabled'",
 "Ensure 'Microsoft iSCSI Initiator Service (MSiSCSI)' is set to 'Disabled'",
 "Ensure 'Peer Name Resolution Protocol (PNRPsvc)' is set to 'Disabled'",
 "Ensure 'Peer Networking Grouping (p2psvc)' is set to 'Disabled'",
 "Ensure 'Peer Networking Identity Manager (p2pimsvc)' is set to 'Disabled'",
 "Ensure 'PNRP Machine Name Publication Service (PNRPAutoReg)' is set to 'Disabled'",
 "Ensure 'Print Spooler (Spooler)' is set to 'Disabled'",
 "Ensure 'Problem Reports and Solutions Control Panel Support (wercplsupport)' is set to 'Disabled'",
 "Ensure 'Remote Access Auto Connection Manager (RasAuto)' is set to 'Disabled'",
 "Ensure 'Remote Desktop Configuration (SessionEnv)' is set to 'Disabled'",
 "Ensure 'Remote Desktop Services (TermService)' is set to 'Disabled'",
 "Ensure 'Remote Desktop Services UserMode Port Redirector (UmRdpService)' is set to 'Disabled'",
 "Ensure 'Remote Registry (RemoteRegistry)' is set to 'Disabled'",
 "Ensure 'Server (LanmanServer)' is set to 'Disabled'",
 "Ensure 'SNMP Service (SNMP)' is set to 'Disabled' or 'Not Installed'",
 "Ensure 'Windows Error Reporting Service (WerSvc)' is set to 'Disabled'",
 "Ensure 'Windows Event Collector (Wecsvc)' is set to 'Disabled'",
 "Ensure 'Windows Push Notifications System Service (WpnService)' is set to 'Disabled'",
 "Ensure 'Windows PushToInstall Service (PushToInstall)' is set to 'Disabled'",
 "Ensure 'Windows Remote Management (WS-Management) (WinRM)' is set to 'Disabled'",
 "Ensure 'Allow Online Tips' is set to 'Disabled'",
 "Ensure 'MSS: (DisableSavePassword) Prevent the dial-up password from being saved' is set to 'Enabled'",
 "Ensure 'MSS: (KeepAliveTime) How often keep-alive packets are sent in milliseconds' is set to 'Enabled: 300,000 or 5 minutes (recommended)'",
 "Ensure 'MSS: (PerformRouterDiscovery) Allow IRDP to detect and configure Default Gateway addresses (could lead to DoS)' is set to 'Disabled'",
 "Ensure 'MSS: (TcpMaxDataRetransmissions IPv6) How many times unacknowledged data is retransmitted' is set to 'Enabled: 3'",
 "Ensure 'MSS: (TcpMaxDataRetransmissions) How many times unacknowledged data is retransmitted' is set to 'Enabled: 3'",
 "Ensure 'Enable Font Providers' is set to 'Disabled'",
 "Ensure 'Turn off Microsoft Peer-to-Peer Networking Services' is set to 'Enabled'",
 "Disable IPv6 (Ensure TCPIP6 Parameter 'DisabledComponents' is set to '0xff (255)')",
 "Ensure 'Prohibit access of the Windows Connect Now wizards' is set to 'Enabled'",
 "Ensure 'Turn off notifications network usage' is set to 'Enabled'",
 "Ensure 'Turn off access to the Store' is set to 'Enabled'",
 "Ensure 'Turn off handwriting personalization data sharing' is set to 'Enabled'",
 "Ensure 'Turn off handwriting recognition error reporting' is set to 'Enabled'",
 "Ensure 'Turn off Internet Connection Wizard if URL connection is referring to Microsoft.com' is set to 'Enabled'",
 "Ensure 'Turn off printing over HTTP' is set to 'Enabled'",
 "Ensure 'Turn off Registration if URL connection is referring to Microsoft.com' is set to 'Enabled'",
 "Ensure 'Turn off Search Companion content file updates' is set to 'Enabled'",
 'Ensure \'Turn off the `"Order Prints`" picture task\' is set to \'Enabled\'',
 'Ensure \'Turn off the `"Publish to Web`" task for files and folders\' is set to \'Enabled\'',
 "Ensure 'Turn off the Windows Messenger Customer Experience Improvement Program' is set to 'Enabled'",
 "Ensure 'Turn off Windows Customer Experience Improvement Program' is set to 'Enabled'",
 "Ensure 'Disallow copying of user input methods to the system account for sign-in' is set to 'Enabled'",
 "Ensure 'Allow Clipboard synchronization across devices' is set to 'Disabled'",
 "Ensure 'Allow upload of User Activities' is set to 'Disabled'",
 "Ensure 'Microsoft Support Diagnostic Tool: Turn on MSDT interactive communication with support provider' is set to 'Disabled'",
 "Ensure 'Enable/Disable PerfTrack' is set to 'Disabled'",
 "Ensure 'Turn off the advertising ID' is set to 'Enabled'",
 "Ensure 'Allow a Windows app to share application data between users' is set to 'Disabled'",
 "Ensure 'Block launching Universal Windows apps with Windows Runtime API access from hosted content.' is set to 'Enabled'",
 "Ensure 'Allow Use of Camera' is set to 'Disabled'",
 "Ensure 'Turn off cloud optimized content' is set to 'Enabled'",
 "Ensure 'Configure Authenticated Proxy usage for the Connected User Experience and Telemetry service' is set to 'Enabled: Disable Authenticated Proxy usage'",
 "Ensure 'Turn off files from Office.com in Quick access view' is set to 'Enabled'",
 "Ensure 'Turn off location' is set to 'Enabled'",
 "Ensure 'Allow Message Service Cloud Sync' is set to 'Disabled'",
 "Ensure 'Join Microsoft MAPS' is set to 'Disabled'",
 "Ensure 'Enable file hash computation feature' is set to 'Enabled'",
 "Ensure 'Configure Watson events' is set to 'Disabled'",
 "Ensure 'Enable news and interests on the taskbar' is set to 'Disabled'",
 "Ensure 'Turn off Push To Install service' is set to 'Enabled'",
 "Ensure 'Disable Cloud Clipboard integration for server-to-client data transfer' is set to 'Enabled'",
 "Ensure 'Allow users to connect remotely by using Remote Desktop Services' is set to 'Disabled'",
 "Ensure 'Allow UI Automation redirection' is set to 'Disabled'",
 "Ensure 'Do not allow COM port redirection' is set to 'Enabled'",
 "Ensure 'Do not allow location redirection' is set to 'Enabled'",
 "Ensure 'Do not allow LPT port redirection' is set to 'Enabled'",
 "Ensure 'Do not allow supported Plug and Play device redirection' is set to 'Enabled'",
 "Ensure 'Do not allow WebAuthn redirection' is set to 'Enabled'",
 "Ensure 'Set time limit for active but idle Remote Desktop Services sessions' is set to 'Enabled: 15 minutes or less, but not Never (0)'",
 "Ensure 'Set time limit for disconnected sessions' is set to 'Enabled: 1 minute'",
 "Ensure 'Allow Cloud Search' is set to 'Enabled: Disable Cloud Search'",
 "Ensure 'Allow search highlights' is set to 'Disabled'",
 "Ensure 'Turn off KMS Client Online AVS Validation' is set to 'Enabled'",
 "Ensure 'Disable all apps from Microsoft Store' is set to 'Disabled'",
 "Ensure 'Turn off the Store application' is set to 'Enabled'",
 "Ensure 'Allow suggested apps in Windows Ink Workspace' is set to 'Disabled'",
 "Ensure 'Prevent Internet Explorer security prompt for Windows Installer scripts' is set to 'Disabled'",
 "Ensure 'Allow remote server management through WinRM' is set to 'Disabled' (Service)",
 "Ensure 'Allow Remote Shell Access' is set to 'Disabled'",
 "Ensure 'Log on as a batch job' is set to 'Administrators'"]
 

def powershell_run_script(command):
    """Runs a PowerShell command and checks its compliance status."""
    script = ["powershell", "-NoProfile", "-ExecutionPolicy", "Bypass", "-Command", command]
    try:
        result = subprocess.run(
            script,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        # Log output and errors for debugging
        print(f"Command Output: {result.stdout}")
        print(f"Command Error: {result.stderr}")
        
        if result.returncode == 0 and "Pass" in result.stdout:
            return 1  # Compliance Pass
        else:
            return 0  # Compliance Fail
    except Exception as e:
        print(f"Error executing command: {e}")
        return None

def run_l2_11_std():
    """Runs compliance checks and generates an audit report."""
    pass_count = 0
    fail_count = 0
    results = {"cis_index": [], "title": [], "status": []}
    
    for i in range(len(cis_index)):
        # Append results incrementally
        results["cis_index"].append(cis_index[i])
        results["title"].append(title[i])
        status = powershell_run_script(code[i])
        results["status"].append("Pass" if status == 1 else "Fail")
        
        if status == 1:
            pass_count += 1
        else:
            fail_count += 1
    
    # Create a DataFrame for the results
    df = pd.DataFrame(data=results)
    filename = os.path.join("./", f"audit_file_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.csv")
    df.to_csv(filename, index=False)
    
    print("Stats:-")
    print("Pass count:", pass_count)
    print("Fail count:", fail_count)
    print(f"Compliance Percentage: {(pass_count / (pass_count + fail_count)) * 100:.2f}%")
    print(f"Audit report saved to {filename}")

# Run the compliance audit
run_l2_11_std()
